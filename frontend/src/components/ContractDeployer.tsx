import React, { useState } from 'react';
import { Card, CardContent, Button, TextField, Typography, IconButton, Divider, Tooltip, MenuItem, Select, InputLabel, FormControl, Alert } from '@mui/material';
import { ContentCopy } from '@mui/icons-material';
import { SelectChangeEvent } from '@mui/material/Select';

// コントラクト名の定数定義
const CONTRACT_NAMES = {
  TOKEN: 'MyToken',
  NFT: 'MyNFT',
};

const ContractDeployer: React.FC = () => {
  const [contractName, setContractName] = useState<string>(CONTRACT_NAMES.TOKEN); // デフォルトを 'MyToken' に設定
  const [initialOwnerAddress, setInitialOwnerAddress] = useState<string>('');
  const [contractAddress, setContractAddress] = useState<string | null>(null);
  const [transactionHash, setTransactionHash] = useState<string | null>(null);
  const [abi, setAbi] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const handleCopyContractAddress = () => {
    if (contractAddress) {
      navigator.clipboard.writeText(contractAddress);
    }
  };

  const handleCopyTransactionHash = () => {
    if (transactionHash) {
      navigator.clipboard.writeText(transactionHash);
    }
  };

  const handleContractNameChange = (e: SelectChangeEvent<string>) => {
    const selectedContractName = e.target.value as string;
    setContractName(selectedContractName);
    setInitialOwnerAddress('');
    setContractAddress(null);
    setTransactionHash(null);
    setAbi(null);
    setError(null);
  };

  const deployContract = async () => {
    setError(null);
    try {
      const response = await fetch('http://localhost:5000/deploy-contract', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 'contractName': contractName, 'constructorArgs': [initialOwnerAddress] }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        setError(errorData.error);
        return;
      }

      const data = await response.json();
      setContractAddress(data.contractAddress);
      setTransactionHash(data.transactionHash);
      setAbi(data.abi);
    } catch (error) {
      const errorMessage = (error as Error).message;
      console.error('Error deploying contract:', errorMessage);
      setError(errorMessage);
    }
  };

  const getContractInfo = async () => {
    setError(null);
    try {
      const response = await fetch('http://localhost:5000/get-contract-info', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 'contractName': contractName }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        setError(errorData.error);
        return;
      }

      const data = await response.json();
      setContractAddress(data.contractAddress);
      setTransactionHash(data.transactionHash);
      setAbi(data.abi);
    } catch (error) {
      const errorMessage = (error as Error).message;
      console.error('Error getting contract info:', errorMessage);
      setError(errorMessage);
    }
  };

  return (
    <>
      <FormControl fullWidth sx={{ mt: 2 }}>
        <InputLabel id="contract-name-label">Contract Name</InputLabel>
        <Select
          labelId="contract-name-label"
          value={contractName}
          onChange={handleContractNameChange}
          label="Contract Name"
        >
          <MenuItem value={CONTRACT_NAMES.TOKEN}>MyToken (ERC20)</MenuItem>
          <MenuItem value={CONTRACT_NAMES.NFT}>MyNFT (ERC721)</MenuItem>
        </Select>
      </FormControl>
      {(contractName === CONTRACT_NAMES.NFT) && (
        <Tooltip title="Please enter the address generated by the Wallet Generator when deploying the contract." placement="top" arrow>
          <TextField
            label="Initial Owner Address"
            value={initialOwnerAddress}
            onChange={(e) => setInitialOwnerAddress(e.target.value)}
            fullWidth
            sx={{ mt: 3 }}
          />
        </Tooltip>
      )}
      <Button variant="contained" color="primary" onClick={deployContract} sx={{ mt: 2 }}>
        Deploy Contract
      </Button>
      <Button variant="contained" color="secondary" onClick={getContractInfo} sx={{ mt: 2, ml: 2 }}>
        Get Contract Info
      </Button>
      {error && <Alert severity="error" sx={{ mt: 2 }}>{error}</Alert>}
      {(contractAddress || transactionHash || abi) && (
        <Card sx={{ mt: 3 }}>
          <CardContent>
            {contractAddress && (
              <>
                <Typography variant="h6">Contract Address:</Typography>
                <div>
                  <Typography variant="body1" color="textSecondary">
                    {contractAddress}
                    <Tooltip title="Copy to clipboard" placement="top">
                      <IconButton
                        aria-label="copy contract address"
                        onClick={handleCopyContractAddress}
                        edge="end"
                        sx={{ ml: 1 }}
                      >
                        <ContentCopy />
                      </IconButton>
                    </Tooltip>
                  </Typography>
                  <Typography variant="body2" color="primary">
                    <a
                      href={`https://www.oklink.com/amoy/address/${contractAddress}`}
                      target="_blank"
                      rel="noopener noreferrer"
                    >
                      View on Amoy Explorer
                    </a>
                  </Typography>
                </div>
              </>
            )}
            <Divider sx={{ my: 2 }} />
            {transactionHash && (
              <>
                <Typography variant="h6">Transaction Hash:</Typography>
                <div>
                  <Typography variant="body1" color="textSecondary">
                    {transactionHash}
                    <Tooltip title="Copy to clipboard" placement="top">
                      <IconButton
                        aria-label="copy transaction hash"
                        onClick={handleCopyTransactionHash}
                        edge="end"
                        sx={{ ml: 1 }}
                      >
                        <ContentCopy />
                      </IconButton>
                    </Tooltip>
                  </Typography>
                  <Typography variant="body2" color="primary">
                    <a
                      href={`https://www.oklink.com/amoy/tx/${transactionHash}`}
                      target="_blank"
                      rel="noopener noreferrer"
                    >
                      View on Amoy Explorer
                    </a>
                  </Typography>
                </div>
              </>
            )}
            <Divider sx={{ my: 2 }} />
            {abi && (
              <>
                <Typography variant="h6">ABI:</Typography>
                <TextField
                  fullWidth
                  multiline
                  rows={10}
                  value={abi}
                  variant="outlined"
                  InputProps={{ readOnly: true }}
                  sx={{ mt: 1 }}
                />
              </>
            )}
          </CardContent>
        </Card>
      )}
    </>
  );
};

export default ContractDeployer;
